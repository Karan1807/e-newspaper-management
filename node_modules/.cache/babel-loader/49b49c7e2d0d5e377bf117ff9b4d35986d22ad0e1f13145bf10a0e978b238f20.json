{"ast":null,"code":"var _jsxFileName = \"/Users/ayush/Downloads/e-newspaper-management-main/client/src/pages/User.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst User = () => {\n  _s();\n  const [userId, setUserId] = useState('');\n  const [userData, setUserData] = useState(null);\n  const handleSearch = () => {\n    // In a real-world scenario, you would fetch the user data from an API or database.\n    // For now, we'll use a mock object for demonstration.\n    const mockUserData = {\n      subscription_plan: 'Premium Plan',\n      favourite_topic: 'Technology'\n    };\n\n    // Setting the mock user data when the search is triggered.\n    setUserData(mockUserData);\n    console.log('Searching for User_ID:', userId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the User Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your User_ID\",\n        value: userId,\n        onChange: e => setUserId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), userData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Subscription Plan: \", userData.subscription_plan]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Favourite Topic: \", userData.favourite_topic]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(User, \"mtpKwm0xy3rU04Jr9+jtKKZm1JI=\");\n_c = User;\nexport default User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","User","_s","userId","setUserId","userData","setUserData","handleSearch","mockUserData","subscription_plan","favourite_topic","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/ayush/Downloads/e-newspaper-management-main/client/src/pages/User.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst User = () => {\n  const [userId, setUserId] = useState('');\n  const [userData, setUserData] = useState(null);\n\n  const handleSearch = () => {\n    // In a real-world scenario, you would fetch the user data from an API or database.\n    // For now, we'll use a mock object for demonstration.\n    const mockUserData = {\n      subscription_plan: 'Premium Plan',\n      favourite_topic: 'Technology',\n    };\n\n    // Setting the mock user data when the search is triggered.\n    setUserData(mockUserData);\n    console.log('Searching for User_ID:', userId);\n  };\n\n  return (\n    <div>\n      <h1>Welcome to the User Page</h1>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your User_ID\"\n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n\n      {/* Conditionally render subscription plan and favourite topic */}\n      {userData && (\n        <div>\n          <h2>Subscription Plan: {userData.subscription_plan}</h2>\n          <h3>Favourite Topic: {userData.favourite_topic}</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default User;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA,MAAMC,YAAY,GAAG;MACnBC,iBAAiB,EAAE,cAAc;MACjCC,eAAe,EAAE;IACnB,CAAC;;IAED;IACAJ,WAAW,CAACE,YAAY,CAAC;IACzBG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAET,MAAM,CAAC;EAC/C,CAAC;EAED,oBACEH,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCjB,OAAA;MAAAa,QAAA,gBACEb,OAAA;QACEkB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,oBAAoB;QAChCC,KAAK,EAAEjB,MAAO;QACdkB,QAAQ,EAAGC,CAAC,IAAKlB,SAAS,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACFjB,OAAA;QAAQwB,OAAO,EAAEjB,YAAa;QAAAM,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EAGLZ,QAAQ,iBACPL,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,GAAI,qBAAmB,EAACR,QAAQ,CAACI,iBAAiB;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxDjB,OAAA;QAAAa,QAAA,GAAI,mBAAiB,EAACR,QAAQ,CAACK,eAAe;MAAA;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CAvCID,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAyCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}